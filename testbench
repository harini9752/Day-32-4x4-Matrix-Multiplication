module tb_matrix_multiplier_4x4;

  reg [15:0] matrix_a [0:3][0:3];
  reg [15:0] matrix_b [0:3][0:3];
  wire [15:0] result [0:3][0:3];

  matrix_multiplier_4x4 uut (
    .matrix_a(matrix_a),
    .matrix_b(matrix_b),
    .result(result)
  );

  initial begin
    // Initialize matrices A and B
    matrix_a[0][0] = 2; matrix_a[0][1] = 1; matrix_a[0][2] = 0; matrix_a[0][3] = 3;
    matrix_a[1][0] = 0; matrix_a[1][1] = 1; matrix_a[1][2] = 2; matrix_a[1][3] = 1;
    matrix_a[2][0] = 1; matrix_a[2][1] = 0; matrix_a[2][2] = 1; matrix_a[2][3] = 2;
    matrix_a[3][0] = 2; matrix_a[3][1] = 1; matrix_a[3][2] = 0; matrix_a[3][3] = 3;

    matrix_b[0][0] = 1; matrix_b[0][1] = 2; matrix_b[0][2] = 3; matrix_b[0][3] = 1;
    matrix_b[1][0] = 0; matrix_b[1][1] = 2; matrix_b[1][2] = 1; matrix_b[1][3] = 2;
    matrix_b[2][0] = 1; matrix_b[2][1] = 0; matrix_b[2][2] = 2; matrix_b[2][3] = 3;
    matrix_b[3][0] = 2; matrix_b[3][1] = 1; matrix_b[3][2] = 3; matrix_b[3][3] = 0;

    // Display input matrices
    $display("Matrix A:");
    for (int i = 0; i < 4; i = i + 1) begin
      $display("%4d %4d %4d %4d", matrix_a[i][0], matrix_a[i][1], matrix_a[i][2], matrix_a[i][3]);
    end

    $display("\nMatrix B:");
    for (int i = 0; i < 4; i = i + 1) begin
      $display("%4d %4d %4d %4d", matrix_b[i][0], matrix_b[i][1], matrix_b[i][2], matrix_b[i][3]);
    end

    // Display result matrix
    $display("\nResult Matrix:");
    for (int i = 0; i < 4; i = i + 1) begin
      $display("%8d %8d %8d %8d", result[i][0], result[i][1], result[i][2], result[i][3]);
    end

    $finish;
  end

endmodule
